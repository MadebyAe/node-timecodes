'use strict';

let test = require('tape');

let timecodes = require('../src');

function roundTime(time) {
	return Math.round(parseFloat(time)*10000)/10000
}


test("fromSeconds", (t) => {


	let tests = [
		// using default at 25fps
		['00:00:00:00', 0, 25],
		['00:00:00:01', 0.04, 25],
		['00:00:00:02', 0.08, 25],
		['00:00:00:10', 0.4, 25],
		['00:00:01:00', 1, 25],
		['00:01:01:00', 61, 25],
		['01:01:01:00', 3661, 25],
		['01:10:31:00', 4231, 25],
		['00:23:47:10', 1427.4, 25],
		['99:59:59:00', 359999, 25],
		['99:59:59:10', 359999.4, 25],
		['99:59:59:24', 359999.98, 25],
		// 29.97
		['00:00:00:00', 0, 29.97],
		['00:00:00:01', 1000/29.97/1000*1, 29.97],
		['00:00:00:02', 1000/29.97/1000*2, 29.97],
		['00:00:00:10', 1000/29.97/1000*10, 29.97],
		['00:00:00:25', 1000/29.97/1000*25, 29.97],
		['00:00:00:26', 1000/29.97/1000*26, 29.97],
		['00:00:00:27', 1000/29.97/1000*27, 29.97],
		['00:00:01:00', 1, 29.97],
		['00:01:01:00', 61, 29.97],
		['01:01:01:00', 3661, 29.97],
		['01:10:31:00', 4231, 29.97],
		['99:59:59:00', 359999, 29.97],
		['99:59:59:29', 1000/29.97/1000 * 29 + 359999, 29.97]

	];

	//// 359999

	tests.forEach(sample => {
		let expected = sample[0],
			actual = timecodes.fromSeconds(roundTime(sample[1]), sample[2]);

		t.equal(actual, expected, `${roundTime(sample[1])} -> ${expected} (${sample[2]}fps)`);
	});

	t.end();
});
